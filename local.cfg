#  Copyright (c) 2021, 2022 MariaDB Corporation Ab.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */
#

# This is the template for the config file local.cfg which describes the conditions on the
# box used for RQG testing
# ========================================================================================
# Recommended hardware + OS setup (High end QA sever but also notebook)
# - Amount of RAM = ~ 3 GB * no of CPU cores * factor for hyperthreading
# - Amount of tmpfs >= 0.5 * Amount of RAM
# - no swap

# All variables which follow need to be finally defined.


# A huge directory where test results, binaries and maybe data of ongoing tests get stored.
# -----------------------------------------------------------------------------------------
# Using some HDD is recommended. For a high end QA server 6TB are sufficient.
use constant DEFAULT_STORE_DIR => '/data';

my $general_store_dir = $ENV{GENERAL_STORE_DIR};
if (not defined $general_store_dir or $general_store_dir eq '') {
    $general_store_dir = DEFAULT_STORE_DIR;
    say("INFO: The environment variable GENERAL_STORE_DIR is not set. Using the default '" .
        DEFAULT_STORE_DIR . "'.");
}
if (not -d $general_store_dir) {
    say("ERROR: The general store dir '$general_store_dir' does not exist or is not a directory.");
    say("The general store dir should be located on a filesystem with much (> 0.5 TB) free space.");
    say("RQG tools and build scripts will create there sub directories for storing test \n" .
        "results and binaries.");
    say("So either take care that the default '" . DEFAULT_STORE_DIR . "' exists or\n " .
        "set the environment variable GENERAL_STORE_DIR pointing to some fitting directory.");
    exit STATUS_ENVIRONMENT_FAILURE;
}

# Additional box specific rr options if required.
# -----------------------------------------------
# Some a bit too old rr version meeting a too new Intel CPU needed the following setting.
# $rr_options_add = '--microarch=\"Intel Kabylake\"';
# Traces sent to Pernosco need --disable-cpuid-features-ext 0xfc230000,0x2c42,0xc
# In case rr works already well on your box than set it to empty string.
$rr_options_add         = '';

# A directory within a fast RAM based filesystem.
# --------------------------------------------------------------------------------------------------
# RAM based filesystems in combination with heavy loaded CPUs are usually more efficient than
# SSD's or HDD's for revealing bugs.
#
# Recommendation:
# Use the tmpfs /dev/shm because its relative big.
# InnoDB supports mmap I/O on '/dev/shm' under certain conditions in order to simulate some
# PMEM device without having a real one.
  $rqg_fast_dir           = '/dev/shm/rqg';
#
# To test the non-mmap I/O on tmpfs, you can use /run/user/$UID.
# But do not use that too excessive (*) because this tmpfs is serious smaller than /dev/shm
# -> less concurrent RQG's possible
# $rqg_fast_dir           = '/run/user/' . `id -u` . '/rqg' ; mkdir $rqg_fast_dir if not -d $rqg_fast_dir;

if (not -d $rqg_fast_dir) {
    say("ERROR: The RQG directory for fast operations '$rqg_fast_dir' does not exist or " .
        "is not a directory.");
    say("This directory should be located on a filesystem of type tmpfs with " .
        "reasonable space like RAM size * 0.5 or more.");
    say("RQG tools and build scripts will store there data for ongoing RQG runs and builds.");
    say("This data will be removed automatic when no more needed.");
    exit STATUS_ENVIRONMENT_FAILURE;
}

# Using a filesystem on a SDD or a HDD is possible.
# But it is not recommended to use it too excessive because of the risks
# - wear out the SSD by writing a lot data per working day
# - the limited IO speed of SSD and especially HDD (compared to RAM) combined with the serious
#   amount of concurrent RQG tests will lead to a high fraction of CPU waiting for IO instead
#   of CPU for user+system. But having an extreme CPU load for user+system is usually more
#   efficient in revealing bugs.

# A directory within a filesystem of a type like 'ext4' or similar.
# --------------------------------------------------------------------------------------------------
# This is usually but not all time located on a slow (compared to RAM) device like a SSD or HDD.
# And that is the reason for using the term 'slow'.
# Strict requirement:
# $rqg_fast_dir on 'tmpfs' and $rqg_slow_dir also on 'tmpfs' is not supported.
#
# Recommendations with samples from some big box for QA:
# In case you
# - have a big enough tmpfs and small enough RQG tests than
#   generate a big file (~33% of tmpfs space)under /dev/shm, format it with 'ext4', mount that and
#   assign a sub directory of the mount point to $rqg_slow_dir.
#   ~ 50% of all concurrent RQG runs there sounds reasonable.
$rqg_slow_dir           = '/dev/shm/rqg_ext4';
#
# - want to work on some SSD than assign a directory from there.
#   But please be aware that some excessive writing on the SSD might wear it out sooen.
#   ~ 20% of all concurrent RQG runs there sounds reasonable.
# $rqg_slow_dir           = '/home/' . `id -un` . /rqg';
#
# - want to work on a HDD your box has
#   But please be aware that using a HDD for DB directories of concurrent RQG runs can lead to some
#   incredible IO load on a quite slow device. You will trade CPU idle for CPU waiting for IO.
#   And in average but not all time extreme CPU load and IO load on RAM is more efficient for
#   finding bugs.
#   ~ 10% of all concurrent RQG runs there sounds reasonable.
# $rqg_slow_dir           = $general_store_dir . '/rqg';
#
# - want to work on some a real PMEM device
#   sudo umount /mnt/mypmem/
#   sudo mount $MYOPT /dev/pmem0 /mnt/mypmem/
#   $MY_OPT=""           # == Use conventional file I/O and not Linux mmap.
#                        # The server should report within its error log
#                        # - that it is using O_DIRECT with 4096-byte block size.
#                        # - InnoDB: File system buffers for log disabled (block size=4096 bytes)
#   $MY_OPT="-o dax"     # == Use the Linux mmap interface.
#                        # The server should report within its error log
#                        #   InnoDB: Memory-mapped log (10485760 bytes)
#   sudo mkdir /mnt/mypmem/rqg
#   sudo chmod 775 /mnt/mypmem/rqg
#   sudo chgrp dev /mnt/mypmem/rqg
#
#   Observation:
#     PMEM mounted with -o dax + use of rr version 5.5.0 leads to
#     FATAL /home/roc/rr/rr/src/record_syscall.cc:5561:process_mmap() errno: ENXIO
# $rqg_slow_dir           = '/mnt/mypmem/rqg';
#   aio=1 + what follows -> InnoDB: Setting O_DIRECT on file ./ibdata1 failed
#   mkdir $rqg_slow_dir

if (not -d $rqg_slow_dir) {
    say("ERROR: The RQG directory for non tmpfs operations '$rqg_slow_dir' does not exist or " .
        "is not a directory.");
    say("This directory should be located on a filesystem of a type != tmpfs.");
    say("RQG tools will store there data for ongoing RQG runs.");
    say("This data will be removed automatic when no more needed.");
    say("Some image located on a filesystem of type tmpfs, formatted as ext4 and mounted on " .
        "'$rqg_slow_dir' is recommended.");
    exit STATUS_ENVIRONMENT_FAILURE;
}
# And if using rr and filesystems like ext4 and != tmpfs than we need the following option.
$rqg_slow_dbdir_rr_add  = '"--innodb_flush_method=fsync"';

# A directory where the results of rqg_batch.pl or single rqg.pl runs should be stored.
# Neither the type tmpfs/ext4/... of the filesystem nor the device behind are that important.
# The data should survive a power loss or OS crash.
# And using a big filesystem with a lot free space is recommended.
$results_dir            = $general_store_dir . '/results';

# The directory containing the archives of the MariaDB installed binaries
# should be located in the same filesystem like $results_dir.
$binarch_dir            = $general_store_dir . '/binarchs';

# The $build_thread (used for computation of ports) for the first RQG runner.
# In case of using rqg_batch.pl and going with several parallel RQG tests the range of
#    $build_thread   up till  $build_thread + 270 - 1
# will be used.
$build_thread           = 730;

1;

